//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { HospitalsEntity } from './db/Hospitals.entity';
import { BedsEntity } from './db/Beds.entity';
import { UsersEntity } from './db/Users.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      HospitalsEntity,
      BedsEntity,
      UsersEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Hospitals: [
        {
          name: 'name 1',
          location: 'location 1',
          totalBeds: 1,
          availableBeds: 1,
          id: 85,
        },
        {
          name: 'name 2',
          location: 'location 2',
          totalBeds: 2,
          availableBeds: 2,
          id: 18,
        },
        {
          name: 'name 3',
          location: 'location 3',
          totalBeds: 3,
          availableBeds: 3,
          id: 37,
        },
        {
          name: 'name 4',
          location: 'location 4',
          totalBeds: 4,
          availableBeds: 4,
          id: 59,
        },
        {
          name: 'name 5',
          location: 'location 5',
          totalBeds: 5,
          availableBeds: 5,
          id: 23,
        },
      ],
      Beds: [
        {
          bedID: 'bedID 1',
          status: 'status 1',
          type: 'type 1',
          hospitalID: 1,
          id: 69,
        },
        {
          bedID: 'bedID 2',
          status: 'status 2',
          type: 'type 2',
          hospitalID: 2,
          id: 86,
        },
        {
          bedID: 'bedID 3',
          status: 'status 3',
          type: 'type 3',
          hospitalID: 3,
          id: 43,
        },
        {
          bedID: 'bedID 4',
          status: 'status 4',
          type: 'type 4',
          hospitalID: 4,
          id: 67,
        },
        {
          bedID: 'bedID 5',
          status: 'status 5',
          type: 'type 5',
          hospitalID: 5,
          id: 1,
        },
      ],
      Users: [
        {
          userID: 'userID 1',
          name: 'name 1',
          contactInformation: 'contactInformation 1',
          medicalHistory: 'medicalHistory 1',
          preferredHospital: 1,
          id: 44,
        },
        {
          userID: 'userID 2',
          name: 'name 2',
          contactInformation: 'contactInformation 2',
          medicalHistory: 'medicalHistory 2',
          preferredHospital: 2,
          id: 12,
        },
        {
          userID: 'userID 3',
          name: 'name 3',
          contactInformation: 'contactInformation 3',
          medicalHistory: 'medicalHistory 3',
          preferredHospital: 3,
          id: 7,
        },
        {
          userID: 'userID 4',
          name: 'name 4',
          contactInformation: 'contactInformation 4',
          medicalHistory: 'medicalHistory 4',
          preferredHospital: 4,
          id: 94,
        },
        {
          userID: 'userID 5',
          name: 'name 5',
          contactInformation: 'contactInformation 5',
          medicalHistory: 'medicalHistory 5',
          preferredHospital: 5,
          id: 98,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('HospitalsEntity', data.Hospitals);
      await this.SeedResource('BedsEntity', data.Beds);
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
